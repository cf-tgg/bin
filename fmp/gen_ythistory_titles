#!/bin/sh
# This script generates a history file for watched YouTube videos.
# It reads a file containing watched video codes, fetches each video's title,
# and appends the code and title to a specified history file.

WATCHED_FILE="watched"
OUTPUT_FILE="history"
DELIM="##"
VERBOSE=false

usage() {
  echo "Usage: $0 [[-w] <watched_file>] [[-o] <output_file>] [-d delimiter] [-csv|-tsv] [-v]"
  echo "Short Hand: $0 WATCHED_FILE OUTPUT_FILE"
  echo "  -w  Specify the watched file (default: watched)"
  echo "  -o  Specify the output history file (default: history)"
  echo "  -d  Set a custom delimiter (default: '##')"
  echo "  -csv  Use comma as delimiter (for CSV format)"
  echo "  -tsv  Use tab as delimiter (for TSV format)"
  echo "  -v  Enable verbose output"
  exit 1
}

# Parse command-line options
while getopts ":w:o:d:vh-:" opt; do
  case $opt in
    w) WATCHED_FILE=$OPTARG ;;
    o) OUTPUT_FILE=$OPTARG ;;
    d) DELIM=$OPTARG ;;
    -)
      case "${OPTARG}" in
        csv) DELIM="," ;;
        tsv) DELIM="\t" ;;
        *) echo "Invalid option: --${OPTARG}" >&2; usage ;;
      esac ;;
    v) VERBOSE=true ;;
    h) usage ;;
    \?) echo "Invalid option: -$OPTARG" >&2; usage ;;
  esac
done

# Positional argument overrides if no -w or -o flags were used
WATCHED_FILE="${1:-$WATCHED_FILE}"
OUTPUT_FILE="${2:-$OUTPUT_FILE}"

# Ensure delimiter is unique enough to avoid potential clashes with video titles
if echo "TestTitle" | grep -q "$DELIM"; then
  echo "Warning: Delimiter '$DELIM' is too common and may cause parsing issues." >&2
  exit 1
fi

# Check if watched file exists
if [ ! -f "$WATCHED_FILE" ]; then
  echo "Error: File $WATCHED_FILE does not exist" >&2
  exit 1
fi

ENTRY_COUNT=$(wc -l < "$WATCHED_FILE")
[ "$VERBOSE" = true ] && echo "Found $ENTRY_COUNT entries in $WATCHED_FILE"

COUNT=0
# Read each line in the watched file, fetch video title, and append to output file
while read -r line; do
  title=$(yt-dlp -e -- "${line}" 2>/dev/null)
  echo "${COUNT}/${ENTRY_COUNT}"

  [ "$VERBOSE" = true ] && echo "Fetching title for $line"
  if [ -n "$title" ]; then
    echo "${line} ${title}"
    echo "${COUNT}${DELIM}${line}${DELIM}${title}" >> "$OUTPUT_FILE"
    [ "$VERBOSE" = true ] && echo "Wrote to $OUTPUT_FILE"
  else
    echo "Failed to fetch title for $line"
    [ "$VERBOSE" = true ] && echo "Failed to fetch title for $line"
  fi

  COUNT=$((COUNT + 1))
done < "$WATCHED_FILE"
