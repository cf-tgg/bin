#!/bin/sh
# -*- mode: sh; -*- vim: ft=sh:ts=2:sw=2:norl:et:

#       __                 __                 __
#      / /____  ___ ____ _/ /__ ___  ___ ____/ /
#     / __/ _ \/ _ `/ _ `/ / -_) _ \/ _ `/ _  /
#     \__/\___/\_, /\_, /_/\__/ .__/\_,_/\_,_/
#             /___//___/     /_/

#    togglepad --- YA wrapper for toggling the touchpad
#
#    DESCRIPTION
#        Toggles the touchpad and notifies
#
#    SYNTAX
#        $0
#
#    USAGE
#        1. Bind the script to any keys you see fit
#        2. Call to toggle the touchpad.
#
#        Can also be called from an xterm or be bound
#        to term functions (see EXAMPLES)
#
#    EXAMPLES
#
#        From xterm:
#            togglepad
#
#        In dwm' config.h:
#             &((Keychord){1, {{0, XK_F9}},  spawn, {.v = (const char *[]){"togglepad", NULL}}}),
#
#        As zsh binding (zle) ~/.zshrc:
#            toggle-touchpad() { /path/to/togglepad || return 1 ; return 0 ; }
#            zle -N toggle-touchpad
#            # bind ctrl-x ctrl-t to toggle-touchpad function which calls the script
#            bindkey ^X^T toggle-touchpad
#
#    DEPENDENCIES
#        xinput or synclient
#        notify-send (for notifications)
#
#    AUTHOR
#        cf <https://github.com/cf-tgg/>
#

usage() {
    env SCRIPT_NAME=$0 envsubst <<-'MAN'
       __                 __                 __
      / /____  ___ ____ _/ /__ ___  ___ ____/ /
     / __/ _ \/ _ `/ _ `/ / -_) _ \/ _ `/ _  /
     \__/\___/\_, /\_, /_/\__/ .__/\_,_/\_,_/
             /___//___/     /_/

    togglepad --- YA wrapper for toggling the touchpad

    DESCRIPTION
        Toggles the touchpad and notifies

    SYNTAX
        $0        (${SCRIPT_NAME})

    USAGE
        1. Bind the script to any keys you see fit
        2. Call to toggle the touchpad.

        Can also be called from an xterm or be bound
        to term functions (see EXAMPLES)

    EXAMPLES

        From shell:

            ${SCRIPT_NAME}

        In dwm' config.h:

             /* bind F9 to ${SCRIPT_NAME} */
             &((Keychord){1, {{0, XK_F9}},  spawn, {.v = (const char *[]){"${SCRIPT_NAME}", NULL}}}),

        As zsh binding (zle) ~/.zshrc:

             toggle-touchpad() { "${SCRIPT_NAME}" || return 1 ; return 0 ; }
             zle -N toggle-touchpad
             # bind ctrl-x ctrl-t to the function which calls the script
             bindkey '^X^T' toggle-touchpad

    DEPENDENCIES
        xinput or synclient
        notify-send (for notifications)

    AUTHOR
        cf <https://github.com/cf-tgg/>

MAN
}

[ $# -gt 0 ] && { usage >&2 ; exit 0 ; }

ID=$(xinput list | grep -Eio '(touchpad|glidepoint)\s*id=[0-9]{1,2}' | grep -Eo '[0-9]{1,2}')
STATE=$(xinput list-props "$ID" | grep 'Device Enabled' | awk '{print $4}')

notify() {
    command -v notify-send >/dev/null 2>&1 || return
    notify-send "$@"
    return 0
}

if [ $STATE -eq 1 ] ; then
    xinput disable "$ID" || synclient TouchpadOff=1
    [ -t 1 ] && echo "Touchpad disabled."
    notify -t 1000 -i 1010 -a "Touchpad" "Touchpad Disabled"
else
    xinput enable "$ID" || synclient TouchpadOff=0
    [ -t 1 ] && echo "Touchpad enabled."
    notify -t 1000  -i 1010 -a "Touchpad" "Touchpad Enabled"
fi

exit 0
