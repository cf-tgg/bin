#!/bin/sh
# ~& [ screenconf ]
#    ___  ___ _ __ ___  ___ _ __   ___ ___  _ __  / _|
#   / __|/ __| '__/ _ \/ _ \ '_ \ / __/ _ \| '_ \| |_
#   \__ \ (__| | |  __/  __/ | | | (_| (_) | | | |  _|
#   |___/\___|_|  \___|\___|_| |_|\___\___/|_| |_|_|
#
#                                              cf.[0]&~
#
#    A simple script to manage screen configurations using xrandr.

# Set the direction variable: "right" for right alignment, "left" for left alignment
DIRECTION="right"  # Change to "left" to align screens to the left of the primary screen

case "$1" in
  -r|-rtl|-right|--right|--right-to-left|right|right-to-left)
    DIRECTION="right" ;;
  -l|-ltr|-left|--left|--left-to-right|left|left-to-right)
    DIRECTION="left" ;;
  -t|-T|-toggle|-Toggle|--toggle|--toggle-direction|--reverse-direction|toggle|switch|reverse|rev|swap|change|alternate|alt)
    DIRECTION=$(if [ "$DIRECTION" = "right" ]; then echo "left"; else echo "right"; fi) ;;
  -h|-help|--help|help|usage|-?|--?|man|info|-info|--info)
    echo "screenconf - A simple script to manage screen configurations using xrandr."
    echo ""
    echo "Usage: $0 [right|left]"
    echo "       $0 [-r|-l|-t|-h|--reverse-direction]"
    echo "       $0 [right-to-left|left-to-right|toggle|help]"
    echo "       $0 [right|left|toggle|help|-r|-l|-t|-h|--reverse-direction]"
    echo "       $0 [switch|reverse|rev|swap|change|alternate|alt]"
    echo "       $0 [right-to-left|left-to-right|toggle|help|-r|-l|-t|-h|--reverse-direction]"
    echo ""
    echo "  ...you shouldn't even need to be reading this, should you?"
    echo ""
    echo "  this script help manage cycling through screen layouts moving the layout one monitor to the right, left, and reverse"
    echo " (right-to-left) alignment of screens."
    echo "  Default direction is 'right-to-left'. All monitors are aligned to the right of the primary monitor."
    echo "  Use 'left' to align monitors to the left of the primary monitor."
    echo "  Use 'toggle' to switch between right and left alignment."
    echo "  Use 'help' to display this help message."
    exit 0 ;;
  *) DIRECTION="right" ;;
esac

CONNCOUNT=$(xrandr | grep -c ' connected')
DISPLAYS=$(xrandr | grep ' connected' | awk '{if ($3 == "primary") {print $1, $4} else {print $1, $3}}')
DPI=384

# Function to check individuous display availablity:
davail() {
    echo "$DISPLAYS" | grep -q "$1"
}

# Debugging output
# { echo "DIRECTION=$DIRECTION" ; echo "CONNCOUNT=$CONNCOUNT" ; echo "DISPLAYS=$DISPLAYS" ; echo "DPI=$DPI" ; } > ~/screencycle.dbg

# Function to parse screen info and calculate width/height offsets
get_screens() {
    echo "$DISPLAYS" | while read -r output res_pos; do
      res=$(echo "$res_pos" | cut -d'+' -f1)  # e.g., "1920x1080"
      pos=$(echo "$res_pos" | cut -d'+' -f2)  # e.g., "0+0"
      width=$(echo "$res" | cut -d'x' -f1)
      height=$(echo "$res" | cut -d'x' -f2)
    # Debugging output for parsed screen info
    # echo "Screen: $output, Resolution: $res, Width: $width, Height: $height, Position: $pos" >> ~/screencycle.dbg
    echo "$output $width $height $pos"
  done
}

get_layout() {
    current_pos=0
    get_screens | while read -r output width pos; do
      offset=$(echo "$pos" | cut -d'+' -f1)
      if [ "$offset" = "0" ]
        then
          first_screen=$output
        fi
      if [ "$offset" -lt ${current_pos} ]; then
        echo "$output $width" > ~/.screenlayout
      fi
    done
}

# Function to calculate xrandr command for screen arrangement
generate_xrandr_commands() {
  primary_width=0  # Initialize primary monitor width
  cmd="xrandr"
  first_screen=$(get_screens | grep '0+0' | awk '{print $1}')
  current_offset_x=0
  current_offset_y=0

  while read -r output width height pos; do
    if [ -z "$first_screen" ]; then
      first_screen="$output"
      primary_width=$width
      cmd="$cmd --output $output --mode ${width}x${height} --pos 0x0"
    else
      # Calculate offset by adding the first width to the 2nd screen,
      # the offset of each new screen should be the sum of the widths of the previous screens
        current_offset_x=$((current_offset_x + primary_width))
      cmd="$cmd --output $output --mode ${width}x${height} --pos ${current_offset_x}x${current_offset_y}"
    fi
  done < "$(get_screens)"

  echo "Generated xrandr command: $cmd" >> ~/screencycle.dbg
  # Execute generated xrandr command
  eval "$cmd"
}

# Main
# if [ "$DIRECTION" = "right" ]; then
get_screens | generate_xrandr_commands
walfeh
