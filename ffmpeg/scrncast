#!/bin/sh

# if ($(pactl list short sources | grep RUNNING | wc -l) > 1) then
#     AUDIO_SOURCE=

SNDV=$(pactl list short sources | grep RUNNING | awk '{print $2}')
dspy() { xrandr | grep 'mm' | awk '{if ($3 == "primary") {print $1, $4} else {print $1, $3}}' ; }
ask() {
   [ -t 1 ]||SCRN="$(dspy | awk '{print $1}' | dmenu -i -p "Quel écran?")" && return
   printf "Quel écran? (%s)\n" "$(DSPY | awk '{printf "%s, ", $1}' | sed 's/, $//')"
   read -r SCRN
}
SIZE="$(dspy | grep "$SCRN" | awk '{print $2}' | cut -d+ -f1)"
SPOS="$(dspy | grep "$SCRN" | awk '{print $2}' | cut -d+ -f2)"
# DEV=$(v4l2-ctl --list-devices | grep '/dev/video' | tr -d '/dev/video' | awk '{print $1}' | dmenu -i -p 'Où?')
ARECORD=$(arecord -l | grep "^card" | awk '{print $2","$7}' | tr -d ':' | awk '{print "hw:"$0}')
OUTPUT="screencast_$(date +%Y-%m-%d_%H%M%S).mkv"

updateicon() { \
    echo "$1" > /tmp/recordingicon
    pkill -RTMIN+9 "${STATUSBAR:-dwmblocks}"
}

asktoend() { \
    response=$(printf "Non\\nOui" | dmenu -i -p "Ça roule encore, on recommençe?") &&
    [ "$response" = "Oui" ] &&  killrecording
}

killrecording() {
    recpid="$(cat /tmp/recordingpid)"
    kill -15 "$recpid"
    rm -f /tmp/recordingpid
    updateicon ""
    pkill -RTMIN+9 "${STATUSBAR:-dwmblocks}"
}

stream() {
    ip=10.0.0.177
    port=5004
    SIZE="1920x1080"
    SPOS=6096
    ffmpeg -f x11grab -s "$SIZE" -i :0.0+$SPOS,0 \
    -c:v libx264 -preset ultrafast -tune zerolatency -x264opts "keyint=30:min-keyint=30:no-scenecut:subme=0" -b:v 4M -g 30 \
    -an -f rtp_mpegts -muxdelay 0 -max_interleave_delta 0 -rtbufsize 64k \
    -probesize 32 -analyzeduration 0 -flush_packets 1 \
    -fflags nobuffer -flags low_delay \
    udp://$ip:$port &
    ffmpeg_pid=$!
    echo "$ffmpeg_pid" > /tmp/recordingpid
    updateicon " "
}

video() {
    ffmpeg \
    -f x11grab \
    -framerate 60 \
    -s "$SIZE" \
    -i ":0.0+${SPOS},0" \
    -f pulse -i "$SNDV" \
    -c:v libx264  -r 30 \
    -preset ultrafast -crf 23 \
    -c:a aac -ac 2 -b:a 128k \
    "$HOME/video-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! > /tmp/recordingpid
    updateicon "🖥"
}

webcamhidef() {
    ffmpeg \
    -f v4l2 \
    -i /dev/video0 \
    -video_size 1920x1080 \
    "$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! > /tmp/recordingpid
    updateicon "🎥"
}

webcam() {
    ffmpeg \
    -f v4l2 \
    -i /dev/video0 \
    -video_size 640x480 \
    "$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! > /tmp/recordingpid
    updateicon "🎥"
}

audio() { \
    ffmpeg \
    -f alsa -i "$ARECORD" \
    -c:a flac -ac 2 \
    "$HOME/audio-$(date '+%y%m%d-%H%M-%S').flac" &
    echo $! > /tmp/recordingpid
    updateicon "🎙️"
}

videoselected()
{
    slop -f "%x %y %w %h" > /tmp/slop
    read -r X Y W H < /tmp/slop
    rm /tmp/slop

    ffmpeg \
    -f x11grab \
    -framerate 30 \
    -video_size "$W"x"$H" \
    -i :0.0+"$X,$Y" \
    -f pulse -i "$SNDV" \
    -c:v libx264 -r 30 \
    -crf 23 -preset ultrafast \
    -c:a aac -ac 2 -b:a 128k \
    -fps_mode cfr \
    "$HOME/box-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! > /tmp/recordingpid
    updateicon "📺"
}

screencast()
{
    ffmpeg -y \
    -f x11grab \
    -s "$SIZE" \
    -i ":0.0+${SPOS},0" \
    -f alsa -i "$ARECORD" \
    -f pulse -i "$SNDV" \
    -r 30 \
    -use_wallclock_as_timestamps 1 \
    -filter_complex "[1:a]volume=1.5,aresample=async=1, aformat=sample_fmts=fltp:channel_layouts=stereo[a1];[2:a]volume=2.0,aresample=async=1, aformat=sample_fmts=fltp:channel_layouts=stereo[a2];[a1][a2]amerge=inputs=2[a]" \
    -map 0:v:0 -map "[a]" \
    -c:v h264 \
    -crf 0 -preset ultrafast \
    -c:a aac -ac 2 -b:a 192k \
    -fps_mode cfr \
    "$HOME/$OUTPUT" &
    echo $! > /tmp/recordingpid
    updateicon "💻🎙️"
}

askrecording() { \
    choice=$(printf "screencast\\nstream\\nvideo\\nvideo selected\\naudio\\nwebcam\\nwebcam (hi-def)" | dmenu -i -p "Comment?")
    case "$choice" in
	screencast) screencast;;
	audio) audio;;
	video) video;;
	*selected) videoselected;;
	webcam) webcam;;
	"webcam (hi-def)") webcamhidef;;
    esac
}

case "$1" in
    stream) stream;;
    screencast) screencast;;
    audio) audio;;
    video) video;;
    *selected) videoselected;;
    kill) killrecording;;
    *) ([ -f /tmp/recordingpid ] && asktoend && exit) || askrecording;;
esac
